



Network Working Group                                        G. D. Marco
Internet-Draft               Dipartimento per la trasformazione digitale
Intended status: Informational                                 F. Marino
Expires: 13 June 2024           Istituto Poligrafico e Zecca dello Stato
                                                        11 December 2023


                       OAuth Status Attestations
                draft-demarco-status-attestations-latest

Abstract

   Status Attestations act as evidence that a specific credential or
   token, whether in JSON Web Tokens (JWT) [RFC7519] or CBOR Web Tokens
   (CWT) format [RFC8392], has not been revoked and is still valid.
   Status Attestations are designed to be short-lived, periodically
   provided to their owners and provided by these latter to the
   verifiers, eliminating the need for verifiers to obtain additional
   information from third-party systems about a token or a digital
   credential.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://peppelinux.github.io/draft-demarco-status-attestations/draft-
   demarco-status-attestations.html.  Status information for this
   document may be found at https://datatracker.ietf.org/doc/draft-
   demarco-status-attestations/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-status-attestations.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 June 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Terminology
   4.  Rationale
   5.  Requirements
   6.  Status Attestation Request
     6.1.  Digital Credential Proof of Possession
   7.  Status Attestation
   8.  Status Attestation Response
   9.  Security Considerations
   10. IANA Considerations
   11. Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Status Attestations play a crucial role in maintaining the integrity
   and trustworthiness of token and digital credentials.  Status
   Attestations serve as proof that a particular digital credential or
   token, whether in JSON Web Tokens (JWT) or CBOR Web Tokens (CWT)
   format, has not been revoked and is still valid.

   In many scenarios, a digital credential may be presented to a
   verifier long after it has been issued.  During this interval, the
   credential could potentially be invalidated for various reasons.  To
   ensure the credential's validity, the issuer provides a short-lived
   Status Attestation to the credential's Holder.  This attestation is
   bound to the credential and can be presented to a verifier, along
   with the credential itself, as proof of the credential's non-
   revocation status.

   Status Attestations are designed to be privacy-preserving and secure.
   These attestations are essential for enabling offline use cases and
   ensuring the security of the digital credential system.  They provide
   a balance between scalability, security, and privacy by minimizing
   the status information.

+---------------------+                             +-------------------+
|                     | Requests Status Attestation |                   |
|                     |---------------------------->|                   |
|   Wallet Instance   |                             | Credential Issuer |
| (Holds credentials) |                             |    (JWT or CWT)   |
|                     | Status Attestation          |                   |
|                     |<----------------------------|                   |
+---------------------+                             +-------------------+


+---------------------+                             +----------+
|                     | Presents credential and     |          |
|   Wallet Instance   | Status Attestation          | Verifier |
|                     |---------------------------->|          |
+---------------------+                             +----------+

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Terminology

   Issuer:  An entity that ...

   Relying Party:  An entity that.... Also known as Verifier.

   Wallet Instance:  An entity that.... Also known as Wallet.

   Attestation Owner:  An entity that.... Also known as Wallet.

4.  Rationale

   OAuth Status Lists [@!I-D.looker-oauth-jwt-cwt-status-list] are
   suitable for specific scenarios, especially when the Verifier needs
   to verify the status of a Credential at a later time after the User
   has presented the Digital Credential.  However, there are instances
   where the Verifier only needs to check the revocation status of a
   Digital Credential at the time of presentation, or situations where
   the Verifier should not be able to check the status of a credential
   over time due to privacy requirements.

   In scenarios where the Verifier, Credential Issuer, and Status List
   Provider are all part of the same domain or operate within a context
   where a high level of trust exists between them and the End-User, the
   OAuth Status List is the optimal solution.  Other cases may expose
   the following privacy risks when using OAuth Status List [@!I-
   D.looker-oauth-jwt-cwt-status-list]:

   *  A Status List provider might be aware of the association between a
      specific list and a Credential Issuer, especially if the latter
      only issues a single type of Credential.  This could inadvertently
      reveal to the Status List provider which list corresponds to which
      Credential.

   *  A Verifier retrieves a Status List by establishing a TCP/IP
      connection with a Status List provider.  This allows the Status
      List provider to obtain the IP address of the Verifier and
      potentially link it to a specific Credential type and Issuer
      associated with that Status List.  A malicious Status List
      provider could exploit internet diagnostic tools, such as Whois or
      GeoIP lookup, to gather additional information about the
      requestor.  This could inadvertently disclose to the Status List
      provider which Credential the requestor is using and from which
      Credential Issuer, information that in some cases should remain
      confidential.

   However, Status Attestations differ significantly from Status Lists
   in several ways:

   1.  *Privacy*: Status Attestations are designed to be privacy-
       preserving.  They do not require the Verifier to gather any
       additional information from third-party systems, thus preventing
       potential privacy leaks.

   2.  *Static Verification*: Status Attestations are designed to be
       statically provided to Verifiers by Wallet Instance (Attestation
       Owner).  This means that once an Attestation is issued, it can be
       verified without any further communication with the Issuer or any
       other party.

   3.  *Token Formats*: Status Attestations are suitable for both JSON
       Web Tokens (JWT) and CBOR Web Tokens (CWT), making them versatile
       for different use cases.

   4.  *Trust Model*: Status Attestations operate under a model where
       the Verifier trusts the Issuer to provide accurate status
       information.  In contrast, Status Lists operate under a model
       where the Verifier trusts the Status List Provider to maintain an
       accurate and up-to-date list of token statuses.

   5.  *Offline flow*: A Status List can be accessed by a Verifier when
       an internet connection is present.  Differently OAuth Status List
       defines how to provide a static Status List Token, to be included
       within a Digital Credential.  This requires the Wallet Instance
       to acquire a new Digital Credential for a specific presentation.
       Even if similar to the Status List Token, the Status Attestations
       enable the User to persistently use their preexistent Digital
       Credentials, as long as the linked Status Attestation is
       provisioned, presented to the Verifier, and not expired.

5.  Requirements

   The Status Attestation:

   *  MUST be presented in conjunction with the Digital Credential.  The
      Status Attestation MUST be timestamped with its issuance datetime,
      always referring to a previous period.

   *  MUST contain the expiration datetime after which the Digital
      Credential MUST NOT be considered valid anymore.

   *  enables offline use cases as it MUST be statically validated using
      the cryptographic signature of the Issuer.

6.  Status Attestation Request

   The Issuer provides the Wallet Instance with a Status Attestation,
   bound to a Credential so that the Wallet Instance can present it to a
   Verifier, along with the Credential itself, as a proof of non-
   revocation status of the Credential.

   The following diagram shows the Wallet Instance requesting a Status
   Attestation related to a specific Credential, to the Issuer.

   +-------------------+                         +--------------------+
   |                   |                         |                    |
   |  Wallet Instance  |                         | Credential Issuer  |
   |                   |                         |                    |
   +--------+----------+                         +----------+---------+
            |                                               |
            | HTTP POST /status                             |
            |  credential_proof = $CredentialPoPJWT         |
            +----------------------------------------------->
            |                                               |
            |  Response with Status Attestation JWT         |
            <-----------------------------------------------+
            |                                               |
   +--------+----------+                         +----------+---------+
   |                   |                         |                    |
   |  Wallet Instance  |                         | Credential Issuer  |
   |                   |                         |                    |
   +-------------------+                         +--------------------+

   *Step 1 (Status Attestation Request)*: The Wallet Instance sends the
   Status Attestation Request to the Issuer.  The request MUST contain
   the Wallet Instance Attestation with its Proof of Possession and a
   Credential Proof of Possession JWT, signed with the private key
   related to the public key contained within the Credential.

   POST /status HTTP/1.1
   Host: issuer.example.org
   Content-Type: application/x-www-form-urlencoded

   credential_pop=$CredentialPoPJWT

   The Issuer verifies the signature of the PoP JWTs using the public
   key contained in the client_assertion and the Credential, which is
   the proof that the Wallet Instance owns the private keys associated
   with the Wallet Instance Attestation and Credential.  Therefore the
   Wallet Instance is entitled to request its Status Attestation.

6.1.  Digital Credential Proof of Possession

   The Wallet that holds a Digital Credential, when requests a Status
   Attestation, MUST give the proof of possession of the Credential to
   the Credential Issuer.

   Below a non-normative example of a Credential PoP is given by the
   following JWT headers and payload:

   {
       "alg": "ES256",
       "typ": "revocation-request+jwt",
       "kid": $WIA-CNF-JWKID

   }
   .
   {
       "iss": "0b434530-e151-4c40-98b7-74c75a5ef760",
       "aud": "https://issuer.example.org/",
       "iat": 1698744039,
       "exp": 1698744139,
       "jti": "6f204f7e-e453-4dfd-814e-9d155319408c",
       "format": "vc+sd-jwt",
       "credential": $Issuer-Signed-JWT
   }

   The Credential Proof of Possession MUST be a JWT that MUST contain
   the parameters (JOSE Header and claims) in the following table.

     +========+==========================================+===========+
     | JOSE   | Description                              | Reference |
     | header |                                          |           |
     +========+==========================================+===========+
     | typ    | It MUST be set to revocation-request+jwt | [RFC7516] |
     |        |                                          | Section   |
     |        |                                          | 4.1.1     |
     +--------+------------------------------------------+-----------+
     | alg    | A digital signature algorithm identifier | [RFC7516] |
     |        | such as per IANA "JSON Web Signature and | Section   |
     |        | Encryption Algorithms" registry.  It     | 4.1.1     |
     |        | MUST NOT be set to none or any symmetric |           |
     |        | algorithm (MAC) identifier.              |           |
     +--------+------------------------------------------+-----------+
     | kid    | Unique identifier of the jwk, as used    |           |
     |        | for the key binding of the Credential.   |           |
     |        | he JWT MUST be signed with the private   |           |
     |        | key whihc the public key is contained in |           |
     |        | the Credential.                          |           |
     +--------+------------------------------------------+-----------+

                                  Table 1

    +============+====================================+===============+
    | Claim      | Description                        | Reference     |
    +============+====================================+===============+
    | iss        | Wallet identifier.                 | [RFC9126] and |
    |            |                                    | [RFC7519]     |
    +------------+------------------------------------+---------------+
    | aud        | It MUST be set to the identifier   | [RFC9126] and |
    |            | of the Credential Issuer.          | [RFC7519]     |
    +------------+------------------------------------+---------------+
    | exp        | UNIX Timestamp with the expiration | [RFC9126] and |
    |            | time of the JWT.                   | [RFC7519]     |
    +------------+------------------------------------+---------------+
    | iat        | UNIX Timestamp with the time of    | [RFC9126] and |
    |            | JWT issuance.                      | [RFC7519]     |
    +------------+------------------------------------+---------------+
    | jti        | Unique identifier for the JWT.     | [RFC7519]     |
    |            |                                    | Section 4.1.7 |
    +------------+------------------------------------+---------------+
    | format     | The data format of the Credential. |               |
    |            | Eg: vc+sd-jwt for SD-JWT, vc+mdoc  |               |
    |            | for ISO/IEC 18013-5 MDOC CBOR      |               |
    +------------+------------------------------------+---------------+
    | credential | It MUST contain the Credential     |               |
    |            | according to the data format given |               |
    |            | in the format claim.               |               |
    +------------+------------------------------------+---------------+

                                  Table 2

7.  Status Attestation

   The Issuer checks the status of the Credential and creates a Status
   Attestation bound to it.  The Issuer creates a new Status
   Attestation, which a non-normative example is given below.

   {
       "alg": "ES256",
       "typ": "non-revocation-attestation+jwt",
       "kid": $ISSUER-JWKID
   }
   .
   {
       "iss": "https://issuer.example.org",
       "iat": 1504699136,
       "exp": 1504700136,
       "credential_hash": $CREDENTIAL-HASH,
       "credential_hash_alg": "sha-256",
       "cnf": {
           "jwk": {...}
       }
   }

8.  Status Attestation Response

   The Issuer then returns the Status Attestation to the Wallet
   Instance, as in the following non-normative example.

    HTTP/1.1 201 OK
    Content-Type: application/json

    {
        "non_revocation_attestation": "eyJhbGciOiJFUzI1NiIsInR5cCI6IndhbGxldC1...",
    }

9.  Security Considerations

   TODO Security

10.  IANA Considerations

   This document has no IANA actions.

11.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7516>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7519>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8392]  Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", RFC 8392, DOI 10.17487/RFC8392,
              May 2018, <https://www.rfc-editor.org/rfc/rfc8392>.

   [RFC9126]  Lodderstedt, T., Campbell, B., Sakimura, N., Tonge, D.,
              and F. Skokan, "OAuth 2.0 Pushed Authorization Requests",
              RFC 9126, DOI 10.17487/RFC9126, September 2021,
              <https://www.rfc-editor.org/rfc/rfc9126>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Giuseppe De Marco
   Dipartimento per la trasformazione digitale
   Email: gi.demarco@innovazione.gov.it


   Francesco Marino
   Istituto Poligrafico e Zecca dello Stato
   Email: fa.marino@ipzs.it
